#include <Servo.h>
#include <UIPEthernet.h>
#include <utility/logging.h>
#include <SPI.h>
#include <PubSubClient.h>

Servo myservo;

const int pinoLed = 9;
const int pinoBotao = 5;
int mqtt = 0;
int pressionadoAnterior = 0;
int ligado = 0;
int pos;    // variable to store the servo position
int pos2;
int guardaState2;

const int pinoledFeedback = 8;
byte mac[]    = {  0xDE, 0xED, 0xBA, 0xFE, 0xFE, 0x14 };
const char* mqtt_server = "m12.cloudmqtt.com";
int port = 11528;





void callback(char* topic, byte* payload, unsigned int length) {
  String topicStr = String(topic);
  Serial.print("Message arrived [");
  Serial.print(topicStr);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(pinoLed, HIGH);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is acive low on the ESP-01)
    
    
  } else if ((char)payload[0] == '0') {
    digitalWrite(pinoLed, LOW);  // Turn the LED off by making the voltage HIGH
  }

  else if ((char)payload[0] == '2') {
    // digitalWrite(pinoLed, LOW);   // Turn the LED on (Note that LOW is the voltage level
    acionaPortao(0);
    Serial.println("Abrir Portao");
    // but actually the LED is on; this is because
    // it is acive low on the ESP-01)
  }  else if ((char)payload[0] == '3') {
    //  digitalWrite(pinoLed, HIGH);  // Turn the LED off by making the voltage HIGH
    Serial.println("Fechar Portao");
    acionaPortao(1);
  }
}

EthernetClient ethClient;
PubSubClient client(mqtt_server, port, callback, ethClient);

void setup() {
  pinMode (pinoledFeedback, OUTPUT);
  pinMode (pinoLed, OUTPUT);
  pinMode (pinoBotao, INPUT);


  Serial.begin(9600);
  myservo.attach(6);
  while (!Serial) {}

  Serial.println("oi");

  if (!Ethernet.begin(mac)) {
    Serial.println("DHCP Failed");
  } else {
    Serial.println(Ethernet.localIP());
  }

  if (client.connect("ClientId", "teste", "123")) {
    digitalWrite(pinoledFeedback, HIGH);
    Serial.println("Cheguei aqui");

    client.publish("Luz", "1");
    client.subscribe("Luz");
    client.setCallback(callback);
    Serial.flush();
  } else {
    Serial.println("Não Cheguei aqui");
  }


  //myservo.write(0);



}



void loop() {

  //  if (!client.connected()) {
  //  reconnect();
  //  }



  int pressionado = digitalRead(pinoBotao);/*
  int pressionadoServo = digitalRead(6);
  Serial.println(pressionadoServo);*/
  // caso o botao nao estava pressionado no instante anterior
  // && é o AND (E)
  Serial.println(pressionado);
  if (pressionado && (pressionadoAnterior == LOW)) {
    acionaPortao(ligado);
    delay(1000);
    ligado =  1 - ligado;
    digitalWrite(pinoLed, !ligado);


  }
  //digitalWrite(pinoLed, ligado);
  //acionaPortao(ligado);
  pressionadoAnterior = pressionado;
  client.loop();
}

void acionaPortao(int direcao) {
  // Abrir Portao : direcao = 1

  if (direcao == 1) {
    for (pos = 0; pos <= 100; pos += 1) { // goes from 0 degrees to 180 degrees
      myservo.write(pos);

      Serial.println("Portao Abrindo");
      Serial.flush();
    }
    //guardaState2 = guardaState2 + 1;
    Serial.println("Portao Aberto");
  }
  // Fechar Portao
  else if (direcao == 0)  {
    for (pos2 = pos; pos2 >= 0; pos2--) { // goes from 180 degrees to 0 degrees
      myservo.write(pos2);  // waits 15ms for the servo to reach the position
      Serial.println("Portao Fechando");
      Serial.flush();
    }
    //guardaState2 = guardaState2 - 1;
    Serial.println("Portao Fechado");
  }
}


void reconnect() {
  // Loop until we're reconnected

  digitalWrite(pinoledFeedback, LOW);//---------------------------------------------------------------------------

  while (!client.connected()) {

    digitalWrite(pinoledFeedback, HIGH);//------------------------------------------------------------------------
    delay(100);//------------------------------------------------------------------------
    digitalWrite(pinoledFeedback, LOW);//------------------------------------------------------------------------
    delay(100);//------------------------------------------------------------------------
    digitalWrite(pinoledFeedback, HIGH);//------------------------------------------------------------------------
    delay(100);//------------------------------------------------------------------------
    digitalWrite(pinoledFeedback, LOW);//------------------------------------------------------------------------

    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    // Attempt to connect
    if (client.connect("clientId2", "teste", "123")) {
      Serial.println("connected");

      digitalWrite(pinoledFeedback, HIGH);
      delay(10 * 1000);

      // Once connected, publish an announcement...
      client.publish("Luz", "hello world");

      // ... and resubscribe
      client.subscribe("Luz");


    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println("try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(1000);
    }
  }
}
